openapi: 3.0.0
info:
  title: happ JSON API
  version: 0.2.0
servers:
  - url: http://localhost:4000
    description: Your local machine.
components:
  securitySchemes:
    JWT:
      type: apiKey
      name: _happ_auth
      in: cookie
  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 6d9a48b6-310c-4cde-9483-9614658f2ce8
        name:
          type: string
          example: John Appleseed
        email:
          type: string
          format: email
          example: example@example.com
    Happening:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 728f10a1-94a5-4049-b25e-4eadce9be938
        name:
          type: string
          example: Fantastic Event
        accountId:
          type: string
          format: uuid
          example: 6d9a48b6-310c-4cde-9483-9614658f2ce8
        description:
          type: string
          example: The best event you are going to experience
        organizerDescription:
          type: string
          example: By John Appleseed
        agenda:
          type: string
          example: 10AM to 1PM @ the library
        isPublished:
          type: boolean
          example: false
paths:
  /accounts:
    post:
      tags:
        - Auth
      summary: Register a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Appleseed
                email:
                  type: string
                  format: email
                  example: example@example.com
                password:
                  type: string
                  example: supersecret
      responses:
        201:
          description: Account created successfully if email was not taken.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
  /accounts/my:
    get:
      tags:
        - Account
      summary: Shows logged in account details.
      security:
        - JWT: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
  /sessions:
    post:
      tags:
        - Auth
      summary: Grants auth token if credentials are valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: example@example.com
                password:
                  type: string
                  example: supersecret
      responses:
        200:
          description: Token has been granted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  authToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          description: Invalid credentials.
    delete:
      tags:
        - Auth
      summary: Removes auth cookie if set.
      responses:
        200:
          description: Logout succeeded.
  /happenings:
    post:
      tags:
        - Happening
      summary: Creates new happening.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Fantastic Event
                description:
                  type: string
                  example: The best event you are going to experience
                organizerDescription:
                  type: string
                  example: By John Appleseed
                agenda:
                  type: string
                  example: 10AM to 1PM @ the library
      responses:
        201:
          description: Happening has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Happening'
        422:
          description: Invalid happening params.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
                          enum:
                            - not-string
                            - empty
                      description:
                        type: array
                        items:
                          type: string
                          enum:
                            - not-string
                            - empty
                      organizerDescription:
                        type: array
                        items:
                          type: string
                          enum:
                            - not-string
                            - empty
                      agenda:
                        type: array
                        items:
                          type: string
                          enum:
                            - not-string
                            - empty
    get:
      tags:
        - Happening
      summary: Lists happenings.
      security:
        - JWT: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Happening'
  /happenings/{id}:
    put:
      tags:
        - Happening
      summary: Updates happening.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Fantastic Event
                description:
                  type: string
                  example: The best event you are going to experience
                organizerDescription:
                  type: string
                  example: By John Appleseed
                agenda:
                  type: string
                  example: 10AM to 1PM @ the library
                isPublished:
                  type: boolean
                  example: true
      responses:
        201:
          description: Happening has been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Happening'
        401:
          description: Unauthorized.
    delete:
      tags:
        - Happening
      summary: Removes happening.
      security:
        - JWT: []
      # TODO: why do we document request body?
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: 728f10a1-94a5-4049-b25e-4eadce9be938
      responses:
        200:
          description: Happening has been removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
        403:
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                  data:
                    type: object
        404:
          description: Happening not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                  data:
                    type: object
  /happenings/{happeningId}/image:
    post:
      tags:
        - Image
      summary: Creates happening image.
      security:
        - JWT: []
      parameters:
        - name: happeningId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 728f10a1-94a5-4049-b25e-4eadce9be938
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Image has been uploaded.
        422:
          description: Invalid file format.
